{"version":3,"sources":["../src/index.ts","../src/commands/init.ts","../src/utils/get-package-manager.ts","../src/utils/logger.ts","../src/utils/handle-error.ts","../src/utils/templates.ts","../src/commands/add.ts","../src/utils/registry.ts"],"sourcesContent":["import { Command } from 'commander';\nimport { init } from './commands/init';\nimport { add } from './commands/add';\n\nfunction main() {\n  const program = new Command();\n  program\n    .name('nativecn')\n    .description('add components and dependencies to your expo project')\n    .version('1.2.0');\n  program.addCommand(init);\n  program.addCommand(add);\n  program.parse(process.argv);\n}\n\nmain();\n","import chalk from \"chalk\";\nimport { Command } from \"commander\";\nimport { existsSync, promises as fs } from \"fs\";\nimport ora from \"ora\";\nimport path from \"path\";\nimport { execa } from \"execa\";\nimport * as z from \"zod\";\n\nimport { getPackageManager } from \"@/src/utils/get-package-manager\";\nimport { handleError } from \"@/src/utils/handle-error\";\nimport { logger } from \"@/src/utils/logger\";\nimport * as templates from \"@/src/utils/templates\";\n\nconst DEPENDENCIES = [\n  \"class-variance-authority\",\n  \"clsx\",\n  \"nativewind@^4.1.23\",\n  \"tailwindcss-animate\",\n  \"tailwind-merge\",\n  \"lucide-react-native\",\n  \"react-native-reanimated\",\n  \"react-native-svg\",\n  \"@rn-primitives/types\",\n  \"@rn-primitives/slot\",\n  \"@rn-primitives/portal\",\n];\nconst DEV_DEPENDENCIES = [\"tailwindcss\"];\n\nconst initOptionsSchema = z.object({\n  cwd: z.string(),\n  yes: z.boolean(),\n});\n\nexport const init = new Command()\n  .name(\"init\")\n  .description(\"initialize your project and install dependencies\")\n  .option(\"-y, --yes\", \"skip confirmation prompt.\", false)\n  .option(\n    \"-c, --cwd <cwd>\",\n    \"the working directory. defaults to the current directory.\",\n    process.cwd()\n  )\n  .action(async (opts) => {\n    try {\n      const options = initOptionsSchema.parse(opts);\n      const cwd = path.resolve(options.cwd);\n\n      await runInit(cwd);\n\n      logger.info(`${chalk.green(\"Success!\")}`);\n    } catch (error) {\n      handleError(error);\n    }\n  });\n\nexport async function runInit(cwd: string) {\n  const spinner = ora(`Initializing project...`)?.start();\n\n  await fs.writeFile(\n    `${cwd}/tailwind.config.js`,\n    templates.TAILWIND_CONFIG,\n    \"utf8\"\n  );\n\n  await fs.writeFile(\n    `${cwd}/nativewind-env.d.ts`,\n    templates.NATIVEWIND_ENV,\n    \"utf8\"\n  );\n  await fs.writeFile(`${cwd}/babel.config.js`, templates.BABEL_CONFIG, \"utf8\");\n  await fs.writeFile(`${cwd}/global.css`, templates.GLOBAL_STYLES, \"utf8\");\n  await fs.writeFile(`${cwd}/metro.config.js`, templates.METRO_CONFIG, \"utf8\");\n\n  const libDir = path.join(cwd, \"lib\");\n\n  if (!existsSync(libDir)) {\n    await fs.mkdir(libDir, { recursive: true });\n  }\n\n  await fs.writeFile(`${cwd}/lib/utils.ts`, templates.UTILS, \"utf8\");\n\n  spinner.succeed();\n\n  const dependenciesSpinner = ora(`Installing dependencies...`)?.start();\n  const packageManager = await getPackageManager(cwd);\n  const packageCommand = packageManager === \"npm\" ? \"install\" : \"add\";\n\n  await execa(packageManager, [packageCommand, ...DEPENDENCIES], { cwd });\n  await execa(\n    packageManager,\n    [\n      packageCommand,\n      ...DEV_DEPENDENCIES,\n      packageManager === \"npm\" ? \"--save-dev\" : \"--dev\",\n    ],\n    { cwd }\n  );\n\n  dependenciesSpinner?.succeed();\n}\n","import { detect } from \"@antfu/ni\";\n\nexport async function getPackageManager(\n  targetDir: string,\n): Promise<\"yarn\" | \"pnpm\" | \"bun\" | \"npm\"> {\n  const packageManager = await detect({ programmatic: true, cwd: targetDir });\n\n  if (packageManager === \"yarn@berry\") return \"yarn\";\n  if (packageManager === \"pnpm@6\") return \"pnpm\";\n  if (packageManager === \"bun\") return \"bun\";\n\n  return packageManager ?? \"npm\";\n}\n","import chalk from \"chalk\";\n\nexport const logger = {\n  error(...args: unknown[]) {\n    console.log(chalk.red(...args));\n  },\n  warn(...args: unknown[]) {\n    console.log(chalk.yellow(...args));\n  },\n  info(...args: unknown[]) {\n    console.log(chalk.cyan(...args));\n  },\n  success(...args: unknown[]) {\n    console.log(chalk.green(...args));\n  },\n  break() {\n    console.log(\"\");\n  },\n};\n","import { logger } from \"./logger\";\n\nexport function handleError(error: unknown) {\n  if (typeof error === \"string\") {\n    logger.error(error);\n    process.exit(1);\n  }\n\n  if (error instanceof Error) {\n    logger.error(error.message);\n    process.exit(1);\n  }\n\n  logger.error(\"Something went wrong. Please try again.\");\n  process.exit(1);\n}\n","export const TAILWIND_CONFIG = `const { hairlineWidth } = require('nativewind/theme');\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  darkMode: 'class',\n  content: [\n    './app/**/*.{ts,tsx}',\n    './components/**/*.{ts,tsx}',\n  ],\n  presets: [require('nativewind/preset')],\n  theme: {\n    extend: {\n      colors: {\n        border: 'hsl(var(--border))',\n        input: 'hsl(var(--input))',\n        ring: 'hsl(var(--ring))',\n        background: 'hsl(var(--background))',\n        foreground: 'hsl(var(--foreground))',\n        primary: {\n          DEFAULT: 'hsl(var(--primary))',\n          foreground: 'hsl(var(--primary-foreground))',\n        },\n        secondary: {\n          DEFAULT: 'hsl(var(--secondary))',\n          foreground: 'hsl(var(--secondary-foreground))',\n        },\n        destructive: {\n          DEFAULT: 'hsl(var(--destructive))',\n          foreground: 'hsl(var(--destructive-foreground))',\n        },\n        muted: {\n          DEFAULT: 'hsl(var(--muted))',\n          foreground: 'hsl(var(--muted-foreground))',\n        },\n        accent: {\n          DEFAULT: 'hsl(var(--accent))',\n          foreground: 'hsl(var(--accent-foreground))',\n        },\n        popover: {\n          DEFAULT: 'hsl(var(--popover))',\n          foreground: 'hsl(var(--popover-foreground))',\n        },\n        card: {\n          DEFAULT: 'hsl(var(--card))',\n          foreground: 'hsl(var(--card-foreground))',\n        },\n      },\n      borderWidth: {\n        hairline: hairlineWidth(),\n      },\n      keyframes: {\n        'accordion-down': {\n          from: { height: '0' },\n          to: { height: 'var(--radix-accordion-content-height)' },\n        },\n        'accordion-up': {\n          from: { height: 'var(--radix-accordion-content-height)' },\n          to: { height: '0' },\n        },\n      },\n      animation: {\n        'accordion-down': 'accordion-down 0.2s ease-out',\n        'accordion-up': 'accordion-up 0.2s ease-out',\n      },\n    },\n  },\n  plugins: [require('tailwindcss-animate')],\n};\n`;\n\nexport const BABEL_CONFIG = `module.exports = function (api) {\n  api.cache(true);\n  return {\n    presets: [\n      [\"babel-preset-expo\", { jsxImportSource: \"nativewind\" }],\n      \"nativewind/babel\",\n    ],\n  };\n};`;\n\nexport const NATIVEWIND_ENV = `/// <reference types=\"nativewind/types\" />`;\n\nexport const UTILS = `import { type ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n`;\n\nexport const METRO_CONFIG = `const { getDefaultConfig } = require(\"expo/metro-config\");\nconst { withNativeWind } = require('nativewind/metro');\n\nconst config = getDefaultConfig(__dirname)\n\nmodule.exports = withNativeWind(config, { input: './global.css' })`;\n\nexport const GLOBAL_STYLES = `@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n    :root {\n        --background: 0 0% 100%;\n        --foreground: 240 10% 3.9%;\n        --card: 0 0% 100%;\n        --card-foreground: 240 10% 3.9%;\n        --popover: 0 0% 100%;\n        --popover-foreground: 240 10% 3.9%;\n        --primary: 240 5.9% 10%;\n        --primary-foreground: 0 0% 98%;\n        --secondary: 240 4.8% 95.9%;\n        --secondary-foreground: 240 5.9% 10%;\n        --muted: 240 4.8% 95.9%;\n        --muted-foreground: 240 3.8% 46.1%;\n        --accent: 240 4.8% 95.9%;\n        --accent-foreground: 240 5.9% 10%;\n        --destructive: 0 84.2% 60.2%;\n        --destructive-foreground: 0 0% 98%;\n        --border: 240 5.9% 90%;\n        --input: 240 5.9% 90%;\n        --ring: 240 5.9% 10%;\n    }\n\n    .dark:root {\n        --background: 240 10% 3.9%;\n        --foreground: 0 0% 98%;\n        --card: 240 10% 3.9%;\n        --card-foreground: 0 0% 98%;\n        --popover: 240 10% 3.9%;\n        --popover-foreground: 0 0% 98%;\n        --primary: 0 0% 98%;\n        --primary-foreground: 240 5.9% 10%;\n        --secondary: 240 3.7% 15.9%;\n        --secondary-foreground: 0 0% 98%;\n        --muted: 240 3.7% 15.9%;\n        --muted-foreground: 240 5% 64.9%;\n        --accent: 240 3.7% 15.9%;\n        --accent-foreground: 0 0% 98%;\n        --destructive: 0 72% 51%;\n        --destructive-foreground: 0 0% 98%;\n        --border: 240 3.7% 15.9%;\n        --input: 240 3.7% 15.9%;\n        --ring: 240 4.9% 83.9%;\n    }\n}\n`;\n","import chalk from \"chalk\";\nimport { Command } from \"commander\";\nimport { existsSync, promises as fs } from \"fs\";\nimport ora from \"ora\";\nimport path from \"path\";\nimport prompts from \"prompts\";\nimport * as z from \"zod\";\nimport { execa } from \"execa\";\nimport { handleError } from \"@/src/utils/handle-error\";\nimport { logger } from \"@/src/utils/logger\";\nimport { ALL_COMPONENTS, fetchComponents } from \"@/src/utils/registry\";\nimport { getPackageManager } from \"@/src/utils/get-package-manager\";\n\nconst addOptionsSchema = z.object({\n  components: z.array(z.string()).optional(),\n  yes: z.boolean(),\n  overwrite: z.boolean(),\n  cwd: z.string(),\n  all: z.boolean(),\n  path: z.string().optional(),\n});\n\nexport const add = new Command()\n  .name(\"add\")\n  .description(\"add a component to your project\")\n  .argument(\"[components...]\", \"the components to add\")\n  .option(\"-y, --yes\", \"skip confirmation prompt.\", true)\n  .option(\"-o, --overwrite\", \"overwrite existing files.\", false)\n  .option(\n    \"-c, --cwd <cwd>\",\n    \"the working directory. defaults to the current directory.\",\n    process.cwd()\n  )\n  .option(\"-a, --all\", \"add all available components\", false)\n  .option(\"-p, --path <path>\", \"the path to add the component to.\")\n  .action(async (components, opts) => {\n    try {\n      const options = addOptionsSchema.parse({\n        components,\n        ...opts,\n      });\n\n      const cwd = path.resolve(options.cwd);\n\n      if (!existsSync(cwd)) {\n        logger.error(`The path ${cwd} does not exist. Please try again.`);\n        process.exit(1);\n      }\n\n      let selectedComponents = options.all\n        ? ALL_COMPONENTS\n        : options.components;\n\n      if (!options.components?.length && !options.all) {\n        const { components } = await prompts({\n          type: \"multiselect\",\n          name: \"components\",\n          message: \"Which components would you like to add?\",\n          hint: \"Space to select. A to toggle all. Enter to submit.\",\n          instructions: false,\n          choices: ALL_COMPONENTS.map((component) => ({\n            title: component,\n            value: component,\n          })),\n        });\n        selectedComponents = components;\n      }\n\n      if (!selectedComponents?.length) {\n        logger.warn(\"No components selected. Exiting.\");\n        process.exit(0);\n      }\n\n      if (!options.yes) {\n        const { proceed } = await prompts({\n          type: \"confirm\",\n          name: \"proceed\",\n          message: `Ready to install components and dependencies. Proceed?`,\n          initial: true,\n        });\n\n        if (!proceed) {\n          process.exit(0);\n        }\n      }\n\n      const payload = await fetchComponents(selectedComponents);\n\n      const spinner = ora(`Installing components...`).start();\n\n      const dependencies = new Set<string>();\n      for (const item of payload) {\n        if (item.metadata.dependencies) {\n          item.metadata.dependencies.forEach((dep) => dependencies.add(dep));\n        }\n      }\n\n      if (dependencies.size > 0) {\n        spinner.text = `Installing component dependencies...`;\n        const packageManager = await getPackageManager(cwd);\n        const packageCommand = packageManager === \"npm\" ? \"install\" : \"add\";\n\n        await execa(\n          packageManager,\n          [packageCommand, ...Array.from(dependencies)],\n          { cwd }\n        );\n\n        spinner.succeed(`Component dependencies installed.`);\n        spinner.start(`Installing components...`);\n      }\n\n      for (const item of payload) {\n        spinner.text = `Installing ${item.name}...`;\n\n        const targetDir = options.path\n          ? path.resolve(cwd, options.path)\n          : `${cwd}/components`;\n        if (!targetDir) {\n          continue;\n        }\n\n        if (!existsSync(targetDir)) {\n          await fs.mkdir(targetDir, { recursive: true });\n        }\n\n        const existingComponent = existsSync(\n          path.resolve(targetDir, item.name)\n        );\n\n        if (existingComponent && !options.overwrite) {\n          if (selectedComponents.includes(item.name.slice(0, -4))) {\n            spinner.stop();\n            const { overwrite } = await prompts({\n              type: \"confirm\",\n              name: \"overwrite\",\n              message: `Component ${item.name} already exists. Would you like to overwrite?`,\n              initial: false,\n            });\n\n            if (!overwrite) {\n              logger.info(\n                `Skipped ${item.name}. To overwrite, run with the ${chalk.green(\n                  \"--overwrite\"\n                )} flag.`\n              );\n              continue;\n            }\n\n            spinner.start(`Installing ${item.name}...`);\n          } else {\n            continue;\n          }\n        }\n\n        const filePath = path.resolve(targetDir, item.name);\n\n        await fs.writeFile(filePath, item.content);\n      }\n      spinner.succeed(`Done.`);\n    } catch (error) {\n      handleError(error);\n    }\n  });\n","export const ALL_COMPONENTS = [\n  \"Avatar\",\n  \"Accordion\",\n  \"Alert\",\n  \"Badge\",\n  \"Button\",\n  \"Card\",\n  \"Checkbox\",\n  \"Input\",\n  \"Label\",\n  \"Progress\",\n  \"RadioGroup\",\n  \"Separator\",\n  \"Skeleton\",\n  \"Switch\",\n  \"Text\",\n  \"Textarea\",\n  \"Toggle\",\n  \"Typography\",\n  \"Tabs\",\n  \"DropdownMenu\",\n];\n\nconst baseUrl = \"https://raw.githubusercontent.com/unisol1020/nativecn/main\";\n\ninterface ComponentMetadata {\n  name: string;\n  dependencies?: string[];\n}\n\nexport const COMPONENT_METADATA: Record<string, ComponentMetadata> = {\n  Avatar: {\n    name: \"Avatar\",\n    dependencies: [\"@rn-primitives/avatar\"],\n  },\n  Accordion: {\n    name: \"Accordion\",\n    dependencies: [\"@rn-primitives/accordion\"],\n  },\n  Checkbox: {\n    name: \"Checkbox\",\n    dependencies: [\"@rn-primitives/checkbox\"],\n  },\n  Label: {\n    name: \"Label\",\n    dependencies: [\"@rn-primitives/label\"],\n  },\n  Progress: {\n    name: \"Progress\",\n    dependencies: [\"@rn-primitives/progress\"],\n  },\n  RadioGroup: {\n    name: \"RadioGroup\",\n    dependencies: [\"@rn-primitives/radio-group\"],\n  },\n  Separator: {\n    name: \"Separator\",\n    dependencies: [\"@rn-primitives/separator\"],\n  },\n  Switch: {\n    name: \"Switch\",\n    dependencies: [\"@rn-primitives/switch\"],\n  },\n  Tabs: {\n    name: \"Tabs\",\n    dependencies: [\"@rn-primitives/tabs\"],\n  },\n  Toggle: {\n    name: \"Toggle\",\n    dependencies: [\"@rn-primitives/toggle\"],\n  },\n  DropdownMenu: {\n    name: \"DropdownMenu\",\n    dependencies: [\"@rn-primitives/dropdown-menu\"],\n  },\n};\n\nexport async function fetchComponents(components: string[]) {\n  try {\n    return await Promise.all(\n      components.map(async (component) => {\n        const response = await fetch(\n          `${baseUrl}/packages/ui/src/${component}.tsx`\n        );\n        const content = await response.text();\n        return {\n          name: `${component}.tsx`,\n          content,\n          metadata: COMPONENT_METADATA[component] || { name: component },\n        };\n      })\n    );\n  } catch (error) {\n    console.error(error);\n    throw new Error(`Failed to fetch components from registry.`);\n  }\n}\n"],"mappings":"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","names":["Command","chalk","chalk","chalk","Command","existsSync","fs","ora","path","z","execa","Command","path","existsSync","components","ora","execa","fs","chalk","Command"]}